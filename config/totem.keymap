//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "./keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define Base        0
#define ZMK_POINTING_DEFAULT_MOVE_VAL 3000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt {
    quick-tap-ms = <175>;
    flavor = "tap-preferred";
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&msc {
    acceleration-exponent = <0>;          // 0
    time-to-max-speed-ms = <300>;         // 300
    delay-ms = <0>;                       // 0
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_semic: comma_semic {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMIC";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        que_ex: que_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "QUE_EX";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        At {
            bindings = <&kp AT>;
            key-positions = <1 11>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <11 22>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 12>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 13>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <25 14>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <15 5>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <17 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Amps {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Under {
            bindings = <&kp UNDER>;
            key-positions = <26 15>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Slash {
            bindings = <&kp SLASH>;
            key-positions = <17 28>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 29>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Mouse {
            bindings = <&tog 5>;
            key-positions = <2 3>;
            layers = <0 5>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <24 22>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Delete {
            bindings = <&kp DEL>;
            key-positions = <8 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        LPar {
            bindings = <&lpar_lt>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        RPar {
            bindings = <&rpar_gt>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        LBrack {
            bindings = <&kp LBKT>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        RBrack {
            bindings = <&kp RBKT>;
            key-positions = <29 28>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";
            bindings = <
       &kp Q        &kp W        &kp E         &kp R          &kp T        &kp Y    &kp U            &kp I         &kp O        &kp P
       &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G        &kp H    &hmr RSHFT J     &hmr RCTRL K  &hmr RALT L  &hmr RGUI SINGLE_QUOTE
&to 1  &kp Z        &kp X        &kp C         &kp V          &kp B        &kp N    &kp M            &comma_semic  &dot_colon   &que_ex                 &to 0
                                 &lt 2 ESC     &lt 3 TAB      &kp SPACE    &kp RET  &lt 4 BACKSPACE  &lt 5 DEL
            >;
        };

        Gaming {
            bindings = <
       &kp TAB    &kp Q  &kp W      &kp E           &kp R        &trans  &trans  &trans  &trans  &trans
       &kp LSHFT  &kp A  &kp S      &kp D           &kp F        &trans  &trans  &trans  &trans  &trans
&to 0  &kp LCTRL  &kp Z  &kp X      &kp C           &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                         &lt 2 ESC  &lt 3 LEFT_ALT  &kp SPACE    &trans  &trans  &trans
            >;
        };

        Fn {
            bindings = <
        &kp F12        &kp F7        &kp F8         &kp F9          &trans    &kp C_PP    &kp C_PREV        &kp C_VOLUME_UP    &kp C_NEXT         &trans
        &hml LGUI F11  &hml LALT F4  &hml LCTRL F5  &hml LSHIFT F6  &trans    &trans      &kp LC(LG(LEFT))  &kp C_VOLUME_DOWN  &kp LC(LG(RIGHT))  &trans
&trans  &kp F10        &kp F1        &kp F2         &kp F3          &trans    &kp C_MUTE  &trans            &kp LC(LG(D))      &trans             &trans  &trans
                                     &trans         &trans          &trans    &trans      &trans            &trans
            >;
        };

        Num {
            bindings = <
        &kp N0        &kp N7        &kp N8         &kp N9          &trans    &trans  &trans      &trans     &trans    &trans
        &hml LGUI N0  &hml LALT N4  &hml LCTRL N5  &hml LSHIFT N6  &trans    &trans  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI
&trans  &kp N0        &kp N1        &kp N2         &kp N3          &trans    &trans  &trans      &trans     &trans    &trans    &trans
                                    &trans         &trans          &trans    &trans  &trans      &trans
            >;
        };

        Nav {
            bindings = <
        &trans    &trans    &kp LS(LA(TAB))  &kp LA(TAB)  &trans    &kp PAGE_UP  &mt LC(BSPC) BSPC  &mt LC(HOME) UP   &mt LC(DEL) DEL  &trans
        &sk LGUI  &sk LALT  &sk LCTRL        &sk LSHIFT   &trans    &kp PG_DN    &mt HOME LEFT      &mt LC(END) DOWN  &mt END RIGHT    &kp ENTER
&trans  &trans    &trans    &trans           &trans       &trans    &kp PG_DN    &kp TAB            &trans            &trans           &trans     &trans
                            &trans           &trans       &trans    &trans       &trans             &trans
            >;
        };

        Mouse {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &msc SCRL_UP    &kp PG_UP       &mmv MOVE_UP    &kp PG_DN        &trans
        &trans  &trans  &trans  &trans  &trans    &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &msc SCRL_DOWN  &mkp MB1        &mkp MB2        &mkp MB3         &trans           &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };
    };
};
